{"mappings":"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","sources":["js/chess.js"],"sourcesContent":["/*\r\n * Copyright (c) 2020, Jeff Hlywa (jhlywa@gmail.com)\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n *----------------------------------------------------------------------------*/\r\n\r\nvar Chess = function(fen) {\r\n    var BLACK = 'b'\r\n    var WHITE = 'w'\r\n  \r\n    var EMPTY = -1\r\n  \r\n    var PAWN = 'p'\r\n    var KNIGHT = 'n'\r\n    var BISHOP = 'b'\r\n    var ROOK = 'r'\r\n    var QUEEN = 'q'\r\n    var KING = 'k'\r\n  \r\n    var SYMBOLS = 'pnbrqkPNBRQK'\r\n  \r\n    var DEFAULT_POSITION =\r\n      'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'\r\n  \r\n    var POSSIBLE_RESULTS = ['1-0', '0-1', '1/2-1/2', '*']\r\n  \r\n    var PAWN_OFFSETS = {\r\n      b: [16, 32, 17, 15],\r\n      w: [-16, -32, -17, -15]\r\n    }\r\n  \r\n    var PIECE_OFFSETS = {\r\n      n: [-18, -33, -31, -14, 18, 33, 31, 14],\r\n      b: [-17, -15, 17, 15],\r\n      r: [-16, 1, 16, -1],\r\n      q: [-17, -16, -15, 1, 17, 16, 15, -1],\r\n      k: [-17, -16, -15, 1, 17, 16, 15, -1]\r\n    }\r\n  \r\n    // prettier-ignore\r\n    var ATTACKS = [\r\n      20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20, 0,\r\n       0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,\r\n       0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,\r\n       0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,\r\n       0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,\r\n       0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,\r\n       0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\r\n      24,24,24,24,24,24,56,  0, 56,24,24,24,24,24,24, 0,\r\n       0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\r\n       0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,\r\n       0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,\r\n       0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,\r\n       0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,\r\n       0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,\r\n      20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20\r\n    ];\r\n  \r\n    // prettier-ignore\r\n    var RAYS = [\r\n       17,  0,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0,  0, 15, 0,\r\n        0, 17,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0, 15,  0, 0,\r\n        0,  0, 17,  0,  0,  0,  0, 16,  0,  0,  0,  0, 15,  0,  0, 0,\r\n        0,  0,  0, 17,  0,  0,  0, 16,  0,  0,  0, 15,  0,  0,  0, 0,\r\n        0,  0,  0,  0, 17,  0,  0, 16,  0,  0, 15,  0,  0,  0,  0, 0,\r\n        0,  0,  0,  0,  0, 17,  0, 16,  0, 15,  0,  0,  0,  0,  0, 0,\r\n        0,  0,  0,  0,  0,  0, 17, 16, 15,  0,  0,  0,  0,  0,  0, 0,\r\n        1,  1,  1,  1,  1,  1,  1,  0, -1, -1,  -1,-1, -1, -1, -1, 0,\r\n        0,  0,  0,  0,  0,  0,-15,-16,-17,  0,  0,  0,  0,  0,  0, 0,\r\n        0,  0,  0,  0,  0,-15,  0,-16,  0,-17,  0,  0,  0,  0,  0, 0,\r\n        0,  0,  0,  0,-15,  0,  0,-16,  0,  0,-17,  0,  0,  0,  0, 0,\r\n        0,  0,  0,-15,  0,  0,  0,-16,  0,  0,  0,-17,  0,  0,  0, 0,\r\n        0,  0,-15,  0,  0,  0,  0,-16,  0,  0,  0,  0,-17,  0,  0, 0,\r\n        0,-15,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,-17,  0, 0,\r\n      -15,  0,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,  0,-17\r\n    ];\r\n  \r\n    var SHIFTS = { p: 0, n: 1, b: 2, r: 3, q: 4, k: 5 }\r\n  \r\n    var FLAGS = {\r\n      NORMAL: 'n',\r\n      CAPTURE: 'c',\r\n      BIG_PAWN: 'b',\r\n      EP_CAPTURE: 'e',\r\n      PROMOTION: 'p',\r\n      KSIDE_CASTLE: 'k',\r\n      QSIDE_CASTLE: 'q'\r\n    }\r\n  \r\n    var BITS = {\r\n      NORMAL: 1,\r\n      CAPTURE: 2,\r\n      BIG_PAWN: 4,\r\n      EP_CAPTURE: 8,\r\n      PROMOTION: 16,\r\n      KSIDE_CASTLE: 32,\r\n      QSIDE_CASTLE: 64\r\n    }\r\n  \r\n    var RANK_1 = 7\r\n    var RANK_2 = 6\r\n    var RANK_3 = 5\r\n    var RANK_4 = 4\r\n    var RANK_5 = 3\r\n    var RANK_6 = 2\r\n    var RANK_7 = 1\r\n    var RANK_8 = 0\r\n  \r\n    // prettier-ignore\r\n    var SQUARES = {\r\n      a8:   0, b8:   1, c8:   2, d8:   3, e8:   4, f8:   5, g8:   6, h8:   7,\r\n      a7:  16, b7:  17, c7:  18, d7:  19, e7:  20, f7:  21, g7:  22, h7:  23,\r\n      a6:  32, b6:  33, c6:  34, d6:  35, e6:  36, f6:  37, g6:  38, h6:  39,\r\n      a5:  48, b5:  49, c5:  50, d5:  51, e5:  52, f5:  53, g5:  54, h5:  55,\r\n      a4:  64, b4:  65, c4:  66, d4:  67, e4:  68, f4:  69, g4:  70, h4:  71,\r\n      a3:  80, b3:  81, c3:  82, d3:  83, e3:  84, f3:  85, g3:  86, h3:  87,\r\n      a2:  96, b2:  97, c2:  98, d2:  99, e2: 100, f2: 101, g2: 102, h2: 103,\r\n      a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119\r\n    };\r\n  \r\n    var ROOKS = {\r\n      w: [\r\n        { square: SQUARES.a1, flag: BITS.QSIDE_CASTLE },\r\n        { square: SQUARES.h1, flag: BITS.KSIDE_CASTLE }\r\n      ],\r\n      b: [\r\n        { square: SQUARES.a8, flag: BITS.QSIDE_CASTLE },\r\n        { square: SQUARES.h8, flag: BITS.KSIDE_CASTLE }\r\n      ]\r\n    }\r\n  \r\n    var board = new Array(128)\r\n    var kings = { w: EMPTY, b: EMPTY }\r\n    var turn = WHITE\r\n    var castling = { w: 0, b: 0 }\r\n    var ep_square = EMPTY\r\n    var half_moves = 0\r\n    var move_number = 1\r\n    var history = []\r\n    var header = {}\r\n    var comments = {}\r\n  \r\n    /* if the user passes in a fen string, load it, else default to\r\n     * starting position\r\n     */\r\n    if (typeof fen === 'undefined') {\r\n      load(DEFAULT_POSITION)\r\n    } else {\r\n      load(fen)\r\n    }\r\n  \r\n    function clear(keep_headers) {\r\n      if (typeof keep_headers === 'undefined') {\r\n        keep_headers = false\r\n      }\r\n  \r\n      board = new Array(128)\r\n      kings = { w: EMPTY, b: EMPTY }\r\n      turn = WHITE\r\n      castling = { w: 0, b: 0 }\r\n      ep_square = EMPTY\r\n      half_moves = 0\r\n      move_number = 1\r\n      history = []\r\n      if (!keep_headers) header = {}\r\n      comments = {}\r\n      update_setup(generate_fen())\r\n    }\r\n  \r\n    function prune_comments() {\r\n      var reversed_history = [];\r\n      var current_comments = {};\r\n      var copy_comment = function(fen) {\r\n        if (fen in comments) {\r\n          current_comments[fen] = comments[fen];\r\n        }\r\n      };\r\n      while (history.length > 0) {\r\n        reversed_history.push(undo_move());\r\n      }\r\n      copy_comment(generate_fen());\r\n      while (reversed_history.length > 0) {\r\n        make_move(reversed_history.pop());\r\n        copy_comment(generate_fen());\r\n      }\r\n      comments = current_comments;\r\n    }\r\n  \r\n    function reset() {\r\n      load(DEFAULT_POSITION)\r\n    }\r\n  \r\n    function load(fen, keep_headers) {\r\n      if (typeof keep_headers === 'undefined') {\r\n        keep_headers = false\r\n      }\r\n  \r\n      var tokens = fen.split(/\\s+/)\r\n      var position = tokens[0]\r\n      var square = 0\r\n  \r\n      if (!validate_fen(fen).valid) {\r\n        return false\r\n      }\r\n  \r\n      clear(keep_headers)\r\n  \r\n      for (var i = 0; i < position.length; i++) {\r\n        var piece = position.charAt(i)\r\n  \r\n        if (piece === '/') {\r\n          square += 8\r\n        } else if (is_digit(piece)) {\r\n          square += parseInt(piece, 10)\r\n        } else {\r\n          var color = piece < 'a' ? WHITE : BLACK\r\n          put({ type: piece.toLowerCase(), color: color }, algebraic(square))\r\n          square++\r\n        }\r\n      }\r\n  \r\n      turn = tokens[1]\r\n  \r\n      if (tokens[2].indexOf('K') > -1) {\r\n        castling.w |= BITS.KSIDE_CASTLE\r\n      }\r\n      if (tokens[2].indexOf('Q') > -1) {\r\n        castling.w |= BITS.QSIDE_CASTLE\r\n      }\r\n      if (tokens[2].indexOf('k') > -1) {\r\n        castling.b |= BITS.KSIDE_CASTLE\r\n      }\r\n      if (tokens[2].indexOf('q') > -1) {\r\n        castling.b |= BITS.QSIDE_CASTLE\r\n      }\r\n  \r\n      ep_square = tokens[3] === '-' ? EMPTY : SQUARES[tokens[3]]\r\n      half_moves = parseInt(tokens[4], 10)\r\n      move_number = parseInt(tokens[5], 10)\r\n  \r\n      update_setup(generate_fen())\r\n  \r\n      return true\r\n    }\r\n  \r\n    /* TODO: this function is pretty much crap - it validates structure but\r\n     * completely ignores content (e.g. doesn't verify that each side has a king)\r\n     * ... we should rewrite this, and ditch the silly error_number field while\r\n     * we're at it\r\n     */\r\n    function validate_fen(fen) {\r\n      var errors = {\r\n        0: 'No errors.',\r\n        1: 'FEN string must contain six space-delimited fields.',\r\n        2: '6th field (move number) must be a positive integer.',\r\n        3: '5th field (half move counter) must be a non-negative integer.',\r\n        4: '4th field (en-passant square) is invalid.',\r\n        5: '3rd field (castling availability) is invalid.',\r\n        6: '2nd field (side to move) is invalid.',\r\n        7: \"1st field (piece positions) does not contain 8 '/'-delimited rows.\",\r\n        8: '1st field (piece positions) is invalid [consecutive numbers].',\r\n        9: '1st field (piece positions) is invalid [invalid piece].',\r\n        10: '1st field (piece positions) is invalid [row too large].',\r\n        11: 'Illegal en-passant square'\r\n      }\r\n  \r\n      /* 1st criterion: 6 space-seperated fields? */\r\n      var tokens = fen.split(/\\s+/)\r\n      if (tokens.length !== 6) {\r\n        return { valid: false, error_number: 1, error: errors[1] }\r\n      }\r\n  \r\n      /* 2nd criterion: move number field is a integer value > 0? */\r\n      if (isNaN(tokens[5]) || parseInt(tokens[5], 10) <= 0) {\r\n        return { valid: false, error_number: 2, error: errors[2] }\r\n      }\r\n  \r\n      /* 3rd criterion: half move counter is an integer >= 0? */\r\n      if (isNaN(tokens[4]) || parseInt(tokens[4], 10) < 0) {\r\n        return { valid: false, error_number: 3, error: errors[3] }\r\n      }\r\n  \r\n      /* 4th criterion: 4th field is a valid e.p.-string? */\r\n      if (!/^(-|[abcdefgh][36])$/.test(tokens[3])) {\r\n        return { valid: false, error_number: 4, error: errors[4] }\r\n      }\r\n  \r\n      /* 5th criterion: 3th field is a valid castle-string? */\r\n      if (!/^(KQ?k?q?|Qk?q?|kq?|q|-)$/.test(tokens[2])) {\r\n        return { valid: false, error_number: 5, error: errors[5] }\r\n      }\r\n  \r\n      /* 6th criterion: 2nd field is \"w\" (white) or \"b\" (black)? */\r\n      if (!/^(w|b)$/.test(tokens[1])) {\r\n        return { valid: false, error_number: 6, error: errors[6] }\r\n      }\r\n  \r\n      /* 7th criterion: 1st field contains 8 rows? */\r\n      var rows = tokens[0].split('/')\r\n      if (rows.length !== 8) {\r\n        return { valid: false, error_number: 7, error: errors[7] }\r\n      }\r\n  \r\n      /* 8th criterion: every row is valid? */\r\n      for (var i = 0; i < rows.length; i++) {\r\n        /* check for right sum of fields AND not two numbers in succession */\r\n        var sum_fields = 0\r\n        var previous_was_number = false\r\n  \r\n        for (var k = 0; k < rows[i].length; k++) {\r\n          if (!isNaN(rows[i][k])) {\r\n            if (previous_was_number) {\r\n              return { valid: false, error_number: 8, error: errors[8] }\r\n            }\r\n            sum_fields += parseInt(rows[i][k], 10)\r\n            previous_was_number = true\r\n          } else {\r\n            if (!/^[prnbqkPRNBQK]$/.test(rows[i][k])) {\r\n              return { valid: false, error_number: 9, error: errors[9] }\r\n            }\r\n            sum_fields += 1\r\n            previous_was_number = false\r\n          }\r\n        }\r\n        if (sum_fields !== 8) {\r\n          return { valid: false, error_number: 10, error: errors[10] }\r\n        }\r\n      }\r\n  \r\n      if (\r\n        (tokens[3][1] == '3' && tokens[1] == 'w') ||\r\n        (tokens[3][1] == '6' && tokens[1] == 'b')\r\n      ) {\r\n        return { valid: false, error_number: 11, error: errors[11] }\r\n      }\r\n  \r\n      /* everything's okay! */\r\n      return { valid: true, error_number: 0, error: errors[0] }\r\n    }\r\n  \r\n    function generate_fen() {\r\n      var empty = 0\r\n      var fen = ''\r\n  \r\n      for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\r\n        if (board[i] == null) {\r\n          empty++\r\n        } else {\r\n          if (empty > 0) {\r\n            fen += empty\r\n            empty = 0\r\n          }\r\n          var color = board[i].color\r\n          var piece = board[i].type\r\n  \r\n          fen += color === WHITE ? piece.toUpperCase() : piece.toLowerCase()\r\n        }\r\n  \r\n        if ((i + 1) & 0x88) {\r\n          if (empty > 0) {\r\n            fen += empty\r\n          }\r\n  \r\n          if (i !== SQUARES.h1) {\r\n            fen += '/'\r\n          }\r\n  \r\n          empty = 0\r\n          i += 8\r\n        }\r\n      }\r\n  \r\n      var cflags = ''\r\n      if (castling[WHITE] & BITS.KSIDE_CASTLE) {\r\n        cflags += 'K'\r\n      }\r\n      if (castling[WHITE] & BITS.QSIDE_CASTLE) {\r\n        cflags += 'Q'\r\n      }\r\n      if (castling[BLACK] & BITS.KSIDE_CASTLE) {\r\n        cflags += 'k'\r\n      }\r\n      if (castling[BLACK] & BITS.QSIDE_CASTLE) {\r\n        cflags += 'q'\r\n      }\r\n  \r\n      /* do we have an empty castling flag? */\r\n      cflags = cflags || '-'\r\n      var epflags = ep_square === EMPTY ? '-' : algebraic(ep_square)\r\n  \r\n      return [fen, turn, cflags, epflags, half_moves, move_number].join(' ')\r\n    }\r\n  \r\n    function set_header(args) {\r\n      for (var i = 0; i < args.length; i += 2) {\r\n        if (typeof args[i] === 'string' && typeof args[i + 1] === 'string') {\r\n          header[args[i]] = args[i + 1]\r\n        }\r\n      }\r\n      return header\r\n    }\r\n  \r\n    /* called when the initial board setup is changed with put() or remove().\r\n     * modifies the SetUp and FEN properties of the header object.  if the FEN is\r\n     * equal to the default position, the SetUp and FEN are deleted\r\n     * the setup is only updated if history.length is zero, ie moves haven't been\r\n     * made.\r\n     */\r\n    function update_setup(fen) {\r\n      if (history.length > 0) return\r\n  \r\n      if (fen !== DEFAULT_POSITION) {\r\n        header['SetUp'] = '1'\r\n        header['FEN'] = fen\r\n      } else {\r\n        delete header['SetUp']\r\n        delete header['FEN']\r\n      }\r\n    }\r\n  \r\n    function get(square) {\r\n      var piece = board[SQUARES[square]]\r\n      return piece ? { type: piece.type, color: piece.color } : null\r\n    }\r\n  \r\n    function put(piece, square) {\r\n      /* check for valid piece object */\r\n      if (!('type' in piece && 'color' in piece)) {\r\n        return false\r\n      }\r\n  \r\n      /* check for piece */\r\n      if (SYMBOLS.indexOf(piece.type.toLowerCase()) === -1) {\r\n        return false\r\n      }\r\n  \r\n      /* check for valid square */\r\n      if (!(square in SQUARES)) {\r\n        return false\r\n      }\r\n  \r\n      var sq = SQUARES[square]\r\n  \r\n      /* don't let the user place more than one king */\r\n      if (\r\n        piece.type == KING &&\r\n        !(kings[piece.color] == EMPTY || kings[piece.color] == sq)\r\n      ) {\r\n        return false\r\n      }\r\n  \r\n      board[sq] = { type: piece.type, color: piece.color }\r\n      if (piece.type === KING) {\r\n        kings[piece.color] = sq\r\n      }\r\n  \r\n      update_setup(generate_fen())\r\n  \r\n      return true\r\n    }\r\n  \r\n    function remove(square) {\r\n      var piece = get(square)\r\n      board[SQUARES[square]] = null\r\n      if (piece && piece.type === KING) {\r\n        kings[piece.color] = EMPTY\r\n      }\r\n  \r\n      update_setup(generate_fen())\r\n  \r\n      return piece\r\n    }\r\n  \r\n    function build_move(board, from, to, flags, promotion) {\r\n      var move = {\r\n        color: turn,\r\n        from: from,\r\n        to: to,\r\n        flags: flags,\r\n        piece: board[from].type\r\n      }\r\n  \r\n      if (promotion) {\r\n        move.flags |= BITS.PROMOTION\r\n        move.promotion = promotion\r\n      }\r\n  \r\n      if (board[to]) {\r\n        move.captured = board[to].type\r\n      } else if (flags & BITS.EP_CAPTURE) {\r\n        move.captured = PAWN\r\n      }\r\n      return move\r\n    }\r\n  \r\n    function generate_moves(options) {\r\n      function add_move(board, moves, from, to, flags) {\r\n        /* if pawn promotion */\r\n        if (\r\n          board[from].type === PAWN &&\r\n          (rank(to) === RANK_8 || rank(to) === RANK_1)\r\n        ) {\r\n          var pieces = [QUEEN, ROOK, BISHOP, KNIGHT]\r\n          for (var i = 0, len = pieces.length; i < len; i++) {\r\n            moves.push(build_move(board, from, to, flags, pieces[i]))\r\n          }\r\n        } else {\r\n          moves.push(build_move(board, from, to, flags))\r\n        }\r\n      }\r\n  \r\n      var moves = []\r\n      var us = turn\r\n      var them = swap_color(us)\r\n      var second_rank = { b: RANK_7, w: RANK_2 }\r\n  \r\n      var first_sq = SQUARES.a8\r\n      var last_sq = SQUARES.h1\r\n      var single_square = false\r\n  \r\n      /* do we want legal moves? */\r\n      var legal =\r\n        typeof options !== 'undefined' && 'legal' in options\r\n          ? options.legal\r\n          : true\r\n  \r\n      /* are we generating moves for a single square? */\r\n      if (typeof options !== 'undefined' && 'square' in options) {\r\n        if (options.square in SQUARES) {\r\n          first_sq = last_sq = SQUARES[options.square]\r\n          single_square = true\r\n        } else {\r\n          /* invalid square */\r\n          return []\r\n        }\r\n      }\r\n  \r\n      for (var i = first_sq; i <= last_sq; i++) {\r\n        /* did we run off the end of the board */\r\n        if (i & 0x88) {\r\n          i += 7\r\n          continue\r\n        }\r\n  \r\n        var piece = board[i]\r\n        if (piece == null || piece.color !== us) {\r\n          continue\r\n        }\r\n  \r\n        if (piece.type === PAWN) {\r\n          /* single square, non-capturing */\r\n          var square = i + PAWN_OFFSETS[us][0]\r\n          if (board[square] == null) {\r\n            add_move(board, moves, i, square, BITS.NORMAL)\r\n  \r\n            /* double square */\r\n            var square = i + PAWN_OFFSETS[us][1]\r\n            if (second_rank[us] === rank(i) && board[square] == null) {\r\n              add_move(board, moves, i, square, BITS.BIG_PAWN)\r\n            }\r\n          }\r\n  \r\n          /* pawn captures */\r\n          for (j = 2; j < 4; j++) {\r\n            var square = i + PAWN_OFFSETS[us][j]\r\n            if (square & 0x88) continue\r\n  \r\n            if (board[square] != null && board[square].color === them) {\r\n              add_move(board, moves, i, square, BITS.CAPTURE)\r\n            } else if (square === ep_square) {\r\n              add_move(board, moves, i, ep_square, BITS.EP_CAPTURE)\r\n            }\r\n          }\r\n        } else {\r\n          for (var j = 0, len = PIECE_OFFSETS[piece.type].length; j < len; j++) {\r\n            var offset = PIECE_OFFSETS[piece.type][j]\r\n            var square = i\r\n  \r\n            while (true) {\r\n              square += offset\r\n              if (square & 0x88) break\r\n  \r\n              if (board[square] == null) {\r\n                add_move(board, moves, i, square, BITS.NORMAL)\r\n              } else {\r\n                if (board[square].color === us) break\r\n                add_move(board, moves, i, square, BITS.CAPTURE)\r\n                break\r\n              }\r\n  \r\n              /* break, if knight or king */\r\n              if (piece.type === 'n' || piece.type === 'k') break\r\n            }\r\n          }\r\n        }\r\n      }\r\n  \r\n      /* check for castling if: a) we're generating all moves, or b) we're doing\r\n       * single square move generation on the king's square\r\n       */\r\n      if (!single_square || last_sq === kings[us]) {\r\n        /* king-side castling */\r\n        if (castling[us] & BITS.KSIDE_CASTLE) {\r\n          var castling_from = kings[us]\r\n          var castling_to = castling_from + 2\r\n  \r\n          if (\r\n            board[castling_from + 1] == null &&\r\n            board[castling_to] == null &&\r\n            !attacked(them, kings[us]) &&\r\n            !attacked(them, castling_from + 1) &&\r\n            !attacked(them, castling_to)\r\n          ) {\r\n            add_move(board, moves, kings[us], castling_to, BITS.KSIDE_CASTLE)\r\n          }\r\n        }\r\n  \r\n        /* queen-side castling */\r\n        if (castling[us] & BITS.QSIDE_CASTLE) {\r\n          var castling_from = kings[us]\r\n          var castling_to = castling_from - 2\r\n  \r\n          if (\r\n            board[castling_from - 1] == null &&\r\n            board[castling_from - 2] == null &&\r\n            board[castling_from - 3] == null &&\r\n            !attacked(them, kings[us]) &&\r\n            !attacked(them, castling_from - 1) &&\r\n            !attacked(them, castling_to)\r\n          ) {\r\n            add_move(board, moves, kings[us], castling_to, BITS.QSIDE_CASTLE)\r\n          }\r\n        }\r\n      }\r\n  \r\n      /* return all pseudo-legal moves (this includes moves that allow the king\r\n       * to be captured)\r\n       */\r\n      if (!legal) {\r\n        return moves\r\n      }\r\n  \r\n      /* filter out illegal moves */\r\n      var legal_moves = []\r\n      for (var i = 0, len = moves.length; i < len; i++) {\r\n        make_move(moves[i])\r\n        if (!king_attacked(us)) {\r\n          legal_moves.push(moves[i])\r\n        }\r\n        undo_move()\r\n      }\r\n  \r\n      return legal_moves\r\n    }\r\n  \r\n    /* convert a move from 0x88 coordinates to Standard Algebraic Notation\r\n     * (SAN)\r\n     *\r\n     * @param {boolean} sloppy Use the sloppy SAN generator to work around over\r\n     * disambiguation bugs in Fritz and Chessbase.  See below:\r\n     *\r\n     * r1bqkbnr/ppp2ppp/2n5/1B1pP3/4P3/8/PPPP2PP/RNBQK1NR b KQkq - 2 4\r\n     * 4. ... Nge7 is overly disambiguated because the knight on c6 is pinned\r\n     * 4. ... Ne7 is technically the valid SAN\r\n     */\r\n    function move_to_san(move, sloppy) {\r\n      var output = ''\r\n  \r\n      if (move.flags & BITS.KSIDE_CASTLE) {\r\n        output = 'O-O'\r\n      } else if (move.flags & BITS.QSIDE_CASTLE) {\r\n        output = 'O-O-O'\r\n      } else {\r\n        var disambiguator = get_disambiguator(move, sloppy)\r\n  \r\n        if (move.piece !== PAWN) {\r\n          output += move.piece.toUpperCase() + disambiguator\r\n        }\r\n  \r\n        if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\r\n          if (move.piece === PAWN) {\r\n            output += algebraic(move.from)[0]\r\n          }\r\n          output += 'x'\r\n        }\r\n  \r\n        output += algebraic(move.to)\r\n  \r\n        if (move.flags & BITS.PROMOTION) {\r\n          output += '=' + move.promotion.toUpperCase()\r\n        }\r\n      }\r\n  \r\n      make_move(move)\r\n      if (in_check()) {\r\n        if (in_checkmate()) {\r\n          output += '#'\r\n        } else {\r\n          output += '+'\r\n        }\r\n      }\r\n      undo_move()\r\n  \r\n      return output\r\n    }\r\n  \r\n    // parses all of the decorators out of a SAN string\r\n    function stripped_san(move) {\r\n      return move.replace(/=/, '').replace(/[+#]?[?!]*$/, '')\r\n    }\r\n  \r\n    function attacked(color, square) {\r\n      for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\r\n        /* did we run off the end of the board */\r\n        if (i & 0x88) {\r\n          i += 7\r\n          continue\r\n        }\r\n  \r\n        /* if empty square or wrong color */\r\n        if (board[i] == null || board[i].color !== color) continue\r\n  \r\n        var piece = board[i]\r\n        var difference = i - square\r\n        var index = difference + 119\r\n  \r\n        if (ATTACKS[index] & (1 << SHIFTS[piece.type])) {\r\n          if (piece.type === PAWN) {\r\n            if (difference > 0) {\r\n              if (piece.color === WHITE) return true\r\n            } else {\r\n              if (piece.color === BLACK) return true\r\n            }\r\n            continue\r\n          }\r\n  \r\n          /* if the piece is a knight or a king */\r\n          if (piece.type === 'n' || piece.type === 'k') return true\r\n  \r\n          var offset = RAYS[index]\r\n          var j = i + offset\r\n  \r\n          var blocked = false\r\n          while (j !== square) {\r\n            if (board[j] != null) {\r\n              blocked = true\r\n              break\r\n            }\r\n            j += offset\r\n          }\r\n  \r\n          if (!blocked) return true\r\n        }\r\n      }\r\n  \r\n      return false\r\n    }\r\n  \r\n    function king_attacked(color) {\r\n      return attacked(swap_color(color), kings[color])\r\n    }\r\n  \r\n    function in_check() {\r\n      return king_attacked(turn)\r\n    }\r\n  \r\n    function in_checkmate() {\r\n      return in_check() && generate_moves().length === 0\r\n    }\r\n  \r\n    function in_stalemate() {\r\n      return !in_check() && generate_moves().length === 0\r\n    }\r\n  \r\n    function insufficient_material() {\r\n      var pieces = {}\r\n      var bishops = []\r\n      var num_pieces = 0\r\n      var sq_color = 0\r\n  \r\n      for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\r\n        sq_color = (sq_color + 1) % 2\r\n        if (i & 0x88) {\r\n          i += 7\r\n          continue\r\n        }\r\n  \r\n        var piece = board[i]\r\n        if (piece) {\r\n          pieces[piece.type] = piece.type in pieces ? pieces[piece.type] + 1 : 1\r\n          if (piece.type === BISHOP) {\r\n            bishops.push(sq_color)\r\n          }\r\n          num_pieces++\r\n        }\r\n      }\r\n  \r\n      /* k vs. k */\r\n      if (num_pieces === 2) {\r\n        return true\r\n      } else if (\r\n        /* k vs. kn .... or .... k vs. kb */\r\n        num_pieces === 3 &&\r\n        (pieces[BISHOP] === 1 || pieces[KNIGHT] === 1)\r\n      ) {\r\n        return true\r\n      } else if (num_pieces === pieces[BISHOP] + 2) {\r\n        /* kb vs. kb where any number of bishops are all on the same color */\r\n        var sum = 0\r\n        var len = bishops.length\r\n        for (var i = 0; i < len; i++) {\r\n          sum += bishops[i]\r\n        }\r\n        if (sum === 0 || sum === len) {\r\n          return true\r\n        }\r\n      }\r\n  \r\n      return false\r\n    }\r\n  \r\n    function in_threefold_repetition() {\r\n      /* TODO: while this function is fine for casual use, a better\r\n       * implementation would use a Zobrist key (instead of FEN). the\r\n       * Zobrist key would be maintained in the make_move/undo_move functions,\r\n       * avoiding the costly that we do below.\r\n       */\r\n      var moves = []\r\n      var positions = {}\r\n      var repetition = false\r\n  \r\n      while (true) {\r\n        var move = undo_move()\r\n        if (!move) break\r\n        moves.push(move)\r\n      }\r\n  \r\n      while (true) {\r\n        /* remove the last two fields in the FEN string, they're not needed\r\n         * when checking for draw by rep */\r\n        var fen = generate_fen()\r\n          .split(' ')\r\n          .slice(0, 4)\r\n          .join(' ')\r\n  \r\n        /* has the position occurred three or move times */\r\n        positions[fen] = fen in positions ? positions[fen] + 1 : 1\r\n        if (positions[fen] >= 3) {\r\n          repetition = true\r\n        }\r\n  \r\n        if (!moves.length) {\r\n          break\r\n        }\r\n        make_move(moves.pop())\r\n      }\r\n  \r\n      return repetition\r\n    }\r\n  \r\n    function push(move) {\r\n      history.push({\r\n        move: move,\r\n        kings: { b: kings.b, w: kings.w },\r\n        turn: turn,\r\n        castling: { b: castling.b, w: castling.w },\r\n        ep_square: ep_square,\r\n        half_moves: half_moves,\r\n        move_number: move_number\r\n      })\r\n    }\r\n  \r\n    function make_move(move) {\r\n      var us = turn\r\n      var them = swap_color(us)\r\n      push(move)\r\n  \r\n      board[move.to] = board[move.from]\r\n      board[move.from] = null\r\n  \r\n      /* if ep capture, remove the captured pawn */\r\n      if (move.flags & BITS.EP_CAPTURE) {\r\n        if (turn === BLACK) {\r\n          board[move.to - 16] = null\r\n        } else {\r\n          board[move.to + 16] = null\r\n        }\r\n      }\r\n  \r\n      /* if pawn promotion, replace with new piece */\r\n      if (move.flags & BITS.PROMOTION) {\r\n        board[move.to] = { type: move.promotion, color: us }\r\n      }\r\n  \r\n      /* if we moved the king */\r\n      if (board[move.to].type === KING) {\r\n        kings[board[move.to].color] = move.to\r\n  \r\n        /* if we castled, move the rook next to the king */\r\n        if (move.flags & BITS.KSIDE_CASTLE) {\r\n          var castling_to = move.to - 1\r\n          var castling_from = move.to + 1\r\n          board[castling_to] = board[castling_from]\r\n          board[castling_from] = null\r\n        } else if (move.flags & BITS.QSIDE_CASTLE) {\r\n          var castling_to = move.to + 1\r\n          var castling_from = move.to - 2\r\n          board[castling_to] = board[castling_from]\r\n          board[castling_from] = null\r\n        }\r\n  \r\n        /* turn off castling */\r\n        castling[us] = ''\r\n      }\r\n  \r\n      /* turn off castling if we move a rook */\r\n      if (castling[us]) {\r\n        for (var i = 0, len = ROOKS[us].length; i < len; i++) {\r\n          if (\r\n            move.from === ROOKS[us][i].square &&\r\n            castling[us] & ROOKS[us][i].flag\r\n          ) {\r\n            castling[us] ^= ROOKS[us][i].flag\r\n            break\r\n          }\r\n        }\r\n      }\r\n  \r\n      /* turn off castling if we capture a rook */\r\n      if (castling[them]) {\r\n        for (var i = 0, len = ROOKS[them].length; i < len; i++) {\r\n          if (\r\n            move.to === ROOKS[them][i].square &&\r\n            castling[them] & ROOKS[them][i].flag\r\n          ) {\r\n            castling[them] ^= ROOKS[them][i].flag\r\n            break\r\n          }\r\n        }\r\n      }\r\n  \r\n      /* if big pawn move, update the en passant square */\r\n      if (move.flags & BITS.BIG_PAWN) {\r\n        if (turn === 'b') {\r\n          ep_square = move.to - 16\r\n        } else {\r\n          ep_square = move.to + 16\r\n        }\r\n      } else {\r\n        ep_square = EMPTY\r\n      }\r\n  \r\n      /* reset the 50 move counter if a pawn is moved or a piece is captured */\r\n      if (move.piece === PAWN) {\r\n        half_moves = 0\r\n      } else if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\r\n        half_moves = 0\r\n      } else {\r\n        half_moves++\r\n      }\r\n  \r\n      if (turn === BLACK) {\r\n        move_number++\r\n      }\r\n      turn = swap_color(turn)\r\n    }\r\n  \r\n    function undo_move() {\r\n      var old = history.pop()\r\n      if (old == null) {\r\n        return null\r\n      }\r\n  \r\n      var move = old.move\r\n      kings = old.kings\r\n      turn = old.turn\r\n      castling = old.castling\r\n      ep_square = old.ep_square\r\n      half_moves = old.half_moves\r\n      move_number = old.move_number\r\n  \r\n      var us = turn\r\n      var them = swap_color(turn)\r\n  \r\n      board[move.from] = board[move.to]\r\n      board[move.from].type = move.piece // to undo any promotions\r\n      board[move.to] = null\r\n  \r\n      if (move.flags & BITS.CAPTURE) {\r\n        board[move.to] = { type: move.captured, color: them }\r\n      } else if (move.flags & BITS.EP_CAPTURE) {\r\n        var index\r\n        if (us === BLACK) {\r\n          index = move.to - 16\r\n        } else {\r\n          index = move.to + 16\r\n        }\r\n        board[index] = { type: PAWN, color: them }\r\n      }\r\n  \r\n      if (move.flags & (BITS.KSIDE_CASTLE | BITS.QSIDE_CASTLE)) {\r\n        var castling_to, castling_from\r\n        if (move.flags & BITS.KSIDE_CASTLE) {\r\n          castling_to = move.to + 1\r\n          castling_from = move.to - 1\r\n        } else if (move.flags & BITS.QSIDE_CASTLE) {\r\n          castling_to = move.to - 2\r\n          castling_from = move.to + 1\r\n        }\r\n  \r\n        board[castling_to] = board[castling_from]\r\n        board[castling_from] = null\r\n      }\r\n  \r\n      return move\r\n    }\r\n  \r\n    /* this function is used to uniquely identify ambiguous moves */\r\n    function get_disambiguator(move, sloppy) {\r\n      var moves = generate_moves({ legal: !sloppy })\r\n  \r\n      var from = move.from\r\n      var to = move.to\r\n      var piece = move.piece\r\n  \r\n      var ambiguities = 0\r\n      var same_rank = 0\r\n      var same_file = 0\r\n  \r\n      for (var i = 0, len = moves.length; i < len; i++) {\r\n        var ambig_from = moves[i].from\r\n        var ambig_to = moves[i].to\r\n        var ambig_piece = moves[i].piece\r\n  \r\n        /* if a move of the same piece type ends on the same to square, we'll\r\n         * need to add a disambiguator to the algebraic notation\r\n         */\r\n        if (piece === ambig_piece && from !== ambig_from && to === ambig_to) {\r\n          ambiguities++\r\n  \r\n          if (rank(from) === rank(ambig_from)) {\r\n            same_rank++\r\n          }\r\n  \r\n          if (file(from) === file(ambig_from)) {\r\n            same_file++\r\n          }\r\n        }\r\n      }\r\n  \r\n      if (ambiguities > 0) {\r\n        /* if there exists a similar moving piece on the same rank and file as\r\n         * the move in question, use the square as the disambiguator\r\n         */\r\n        if (same_rank > 0 && same_file > 0) {\r\n          return algebraic(from)\r\n        } else if (same_file > 0) {\r\n          /* if the moving piece rests on the same file, use the rank symbol as the\r\n           * disambiguator\r\n           */\r\n          return algebraic(from).charAt(1)\r\n        } else {\r\n          /* else use the file symbol */\r\n          return algebraic(from).charAt(0)\r\n        }\r\n      }\r\n  \r\n      return ''\r\n    }\r\n  \r\n    function ascii() {\r\n      var s = '   +------------------------+\\n'\r\n      for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\r\n        /* display the rank */\r\n        if (file(i) === 0) {\r\n          s += ' ' + '87654321'[rank(i)] + ' |'\r\n        }\r\n  \r\n        /* empty piece */\r\n        if (board[i] == null) {\r\n          s += ' . '\r\n        } else {\r\n          var piece = board[i].type\r\n          var color = board[i].color\r\n          var symbol = color === WHITE ? piece.toUpperCase() : piece.toLowerCase()\r\n          s += ' ' + symbol + ' '\r\n        }\r\n  \r\n        if ((i + 1) & 0x88) {\r\n          s += '|\\n'\r\n          i += 8\r\n        }\r\n      }\r\n      s += '   +------------------------+\\n'\r\n      s += '     a  b  c  d  e  f  g  h\\n'\r\n  \r\n      return s\r\n    }\r\n  \r\n    // convert a move from Standard Algebraic Notation (SAN) to 0x88 coordinates\r\n    function move_from_san(move, sloppy) {\r\n      // strip off any move decorations: e.g Nf3+?!\r\n      var clean_move = stripped_san(move)\r\n  \r\n      // if we're using the sloppy parser run a regex to grab piece, to, and from\r\n      // this should parse invalid SAN like: Pe2-e4, Rc1c4, Qf3xf7\r\n      if (sloppy) {\r\n        var matches = clean_move.match(\r\n          /([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/\r\n        )\r\n        if (matches) {\r\n          var piece = matches[1]\r\n          var from = matches[2]\r\n          var to = matches[3]\r\n          var promotion = matches[4]\r\n        }\r\n      }\r\n  \r\n      var moves = generate_moves()\r\n      for (var i = 0, len = moves.length; i < len; i++) {\r\n        // try the strict parser first, then the sloppy parser if requested\r\n        // by the user\r\n        if (\r\n          clean_move === stripped_san(move_to_san(moves[i])) ||\r\n          (sloppy && clean_move === stripped_san(move_to_san(moves[i], true)))\r\n        ) {\r\n          return moves[i]\r\n        } else {\r\n          if (\r\n            matches &&\r\n            (!piece || piece.toLowerCase() == moves[i].piece) &&\r\n            SQUARES[from] == moves[i].from &&\r\n            SQUARES[to] == moves[i].to &&\r\n            (!promotion || promotion.toLowerCase() == moves[i].promotion)\r\n          ) {\r\n            return moves[i]\r\n          }\r\n        }\r\n      }\r\n  \r\n      return null\r\n    }\r\n  \r\n    /*****************************************************************************\r\n     * UTILITY FUNCTIONS\r\n     ****************************************************************************/\r\n    function rank(i) {\r\n      return i >> 4\r\n    }\r\n  \r\n    function file(i) {\r\n      return i & 15\r\n    }\r\n  \r\n    function algebraic(i) {\r\n      var f = file(i),\r\n        r = rank(i)\r\n      return 'abcdefgh'.substring(f, f + 1) + '87654321'.substring(r, r + 1)\r\n    }\r\n  \r\n    function swap_color(c) {\r\n      return c === WHITE ? BLACK : WHITE\r\n    }\r\n  \r\n    function is_digit(c) {\r\n      return '0123456789'.indexOf(c) !== -1\r\n    }\r\n  \r\n    /* pretty = external move object */\r\n    function make_pretty(ugly_move) {\r\n      var move = clone(ugly_move)\r\n      move.san = move_to_san(move, false)\r\n      move.to = algebraic(move.to)\r\n      move.from = algebraic(move.from)\r\n  \r\n      var flags = ''\r\n  \r\n      for (var flag in BITS) {\r\n        if (BITS[flag] & move.flags) {\r\n          flags += FLAGS[flag]\r\n        }\r\n      }\r\n      move.flags = flags\r\n  \r\n      return move\r\n    }\r\n  \r\n    function clone(obj) {\r\n      var dupe = obj instanceof Array ? [] : {}\r\n  \r\n      for (var property in obj) {\r\n        if (typeof property === 'object') {\r\n          dupe[property] = clone(obj[property])\r\n        } else {\r\n          dupe[property] = obj[property]\r\n        }\r\n      }\r\n  \r\n      return dupe\r\n    }\r\n  \r\n    function trim(str) {\r\n      return str.replace(/^\\s+|\\s+$/g, '')\r\n    }\r\n  \r\n    /*****************************************************************************\r\n     * DEBUGGING UTILITIES\r\n     ****************************************************************************/\r\n    function perft(depth) {\r\n      var moves = generate_moves({ legal: false })\r\n      var nodes = 0\r\n      var color = turn\r\n  \r\n      for (var i = 0, len = moves.length; i < len; i++) {\r\n        make_move(moves[i])\r\n        if (!king_attacked(color)) {\r\n          if (depth - 1 > 0) {\r\n            var child_nodes = perft(depth - 1)\r\n            nodes += child_nodes\r\n          } else {\r\n            nodes++\r\n          }\r\n        }\r\n        undo_move()\r\n      }\r\n  \r\n      return nodes\r\n    }\r\n  \r\n    return {\r\n      /***************************************************************************\r\n       * PUBLIC CONSTANTS (is there a better way to do this?)\r\n       **************************************************************************/\r\n      WHITE: WHITE,\r\n      BLACK: BLACK,\r\n      PAWN: PAWN,\r\n      KNIGHT: KNIGHT,\r\n      BISHOP: BISHOP,\r\n      ROOK: ROOK,\r\n      QUEEN: QUEEN,\r\n      KING: KING,\r\n      SQUARES: (function() {\r\n        /* from the ECMA-262 spec (section 12.6.4):\r\n         * \"The mechanics of enumerating the properties ... is\r\n         * implementation dependent\"\r\n         * so: for (var sq in SQUARES) { keys.push(sq); } might not be\r\n         * ordered correctly\r\n         */\r\n        var keys = []\r\n        for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\r\n          if (i & 0x88) {\r\n            i += 7\r\n            continue\r\n          }\r\n          keys.push(algebraic(i))\r\n        }\r\n        return keys\r\n      })(),\r\n      FLAGS: FLAGS,\r\n  \r\n      /***************************************************************************\r\n       * PUBLIC API\r\n       **************************************************************************/\r\n      load: function(fen) {\r\n        return load(fen)\r\n      },\r\n  \r\n      reset: function() {\r\n        return reset()\r\n      },\r\n  \r\n      moves: function(options) {\r\n        /* The internal representation of a chess move is in 0x88 format, and\r\n         * not meant to be human-readable.  The code below converts the 0x88\r\n         * square coordinates to algebraic coordinates.  It also prunes an\r\n         * unnecessary move keys resulting from a verbose call.\r\n         */\r\n  \r\n        var ugly_moves = generate_moves(options)\r\n        var moves = []\r\n  \r\n        for (var i = 0, len = ugly_moves.length; i < len; i++) {\r\n          /* does the user want a full move object (most likely not), or just\r\n           * SAN\r\n           */\r\n          if (\r\n            typeof options !== 'undefined' &&\r\n            'verbose' in options &&\r\n            options.verbose\r\n          ) {\r\n            moves.push(make_pretty(ugly_moves[i]))\r\n          } else {\r\n            moves.push(move_to_san(ugly_moves[i], false))\r\n          }\r\n        }\r\n  \r\n        return moves\r\n      },\r\n\r\n      ugly_moves: function(options) {\r\n        var ugly_moves = generate_moves(options);\r\n        return ugly_moves;\r\n      },\r\n  \r\n      in_check: function() {\r\n        return in_check()\r\n      },\r\n  \r\n      in_checkmate: function() {\r\n        return in_checkmate()\r\n      },\r\n  \r\n      in_stalemate: function() {\r\n        return in_stalemate()\r\n      },\r\n  \r\n      in_draw: function() {\r\n        return (\r\n          half_moves >= 100 ||\r\n          in_stalemate() ||\r\n          insufficient_material() ||\r\n          in_threefold_repetition()\r\n        )\r\n      },\r\n  \r\n      insufficient_material: function() {\r\n        return insufficient_material()\r\n      },\r\n  \r\n      in_threefold_repetition: function() {\r\n        return in_threefold_repetition()\r\n      },\r\n  \r\n      game_over: function() {\r\n        return (\r\n          half_moves >= 100 ||\r\n          in_checkmate() ||\r\n          in_stalemate() ||\r\n          insufficient_material() ||\r\n          in_threefold_repetition()\r\n        )\r\n      },\r\n  \r\n      validate_fen: function(fen) {\r\n        return validate_fen(fen)\r\n      },\r\n  \r\n      fen: function() {\r\n        return generate_fen()\r\n      },\r\n  \r\n      board: function() {\r\n        var output = [],\r\n          row = []\r\n  \r\n        for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\r\n          if (board[i] == null) {\r\n            row.push(null)\r\n          } else {\r\n            row.push({ type: board[i].type, color: board[i].color })\r\n          }\r\n          if ((i + 1) & 0x88) {\r\n            output.push(row)\r\n            row = []\r\n            i += 8\r\n          }\r\n        }\r\n  \r\n        return output\r\n      },\r\n  \r\n      pgn: function(options) {\r\n        /* using the specification from http://www.chessclub.com/help/PGN-spec\r\n         * example for html usage: .pgn({ max_width: 72, newline_char: \"<br />\" })\r\n         */\r\n        var newline =\r\n          typeof options === 'object' && typeof options.newline_char === 'string'\r\n            ? options.newline_char\r\n            : '\\n'\r\n        var max_width =\r\n          typeof options === 'object' && typeof options.max_width === 'number'\r\n            ? options.max_width\r\n            : 0\r\n        var result = []\r\n        var header_exists = false\r\n  \r\n        /* add the PGN header headerrmation */\r\n        for (var i in header) {\r\n          /* TODO: order of enumerated properties in header object is not\r\n           * guaranteed, see ECMA-262 spec (section 12.6.4)\r\n           */\r\n          result.push('[' + i + ' \"' + header[i] + '\"]' + newline)\r\n          header_exists = true\r\n        }\r\n  \r\n        if (header_exists && history.length) {\r\n          result.push(newline)\r\n        }\r\n  \r\n        var append_comment = function(move_string) {\r\n          var comment = comments[generate_fen()]\r\n          if (typeof comment !== 'undefined') {\r\n            var delimiter = move_string.length > 0 ? ' ' : '';\r\n            move_string = `${move_string}${delimiter}{${comment}}`\r\n          }\r\n          return move_string\r\n        }\r\n  \r\n        /* pop all of history onto reversed_history */\r\n        var reversed_history = []\r\n        while (history.length > 0) {\r\n          reversed_history.push(undo_move())\r\n        }\r\n  \r\n        var moves = []\r\n        var move_string = ''\r\n  \r\n        /* special case of a commented starting position with no moves */\r\n        if (reversed_history.length === 0) {\r\n          moves.push(append_comment(''))\r\n        }\r\n  \r\n        /* build the list of moves.  a move_string looks like: \"3. e3 e6\" */\r\n        while (reversed_history.length > 0) {\r\n          move_string = append_comment(move_string)\r\n          var move = reversed_history.pop()\r\n  \r\n          /* if the position started with black to move, start PGN with 1. ... */\r\n          if (!history.length && move.color === 'b') {\r\n            move_string = move_number + '. ...'\r\n          } else if (move.color === 'w') {\r\n            /* store the previous generated move_string if we have one */\r\n            if (move_string.length) {\r\n              moves.push(move_string)\r\n            }\r\n            move_string = move_number + '.'\r\n          }\r\n  \r\n          move_string = move_string + ' ' + move_to_san(move, false)\r\n          make_move(move)\r\n        }\r\n  \r\n        /* are there any other leftover moves? */\r\n        if (move_string.length) {\r\n          moves.push(append_comment(move_string))\r\n        }\r\n  \r\n        /* is there a result? */\r\n        if (typeof header.Result !== 'undefined') {\r\n          moves.push(header.Result)\r\n        }\r\n  \r\n        /* history should be back to what it was before we started generating PGN,\r\n         * so join together moves\r\n         */\r\n        if (max_width === 0) {\r\n          return result.join('') + moves.join(' ')\r\n        }\r\n  \r\n        var strip = function() {\r\n          if (result.length > 0 && result[result.length - 1] === ' ') {\r\n            result.pop();\r\n            return true;\r\n          }\r\n          return false;\r\n        };\r\n  \r\n        /* NB: this does not preserve comment whitespace. */\r\n        var wrap_comment = function(width, move) {\r\n          for (var token of move.split(' ')) {\r\n            if (!token) {\r\n              continue;\r\n            }\r\n            if (width + token.length > max_width) {\r\n              while (strip()) {\r\n                width--;\r\n              }\r\n              result.push(newline);\r\n              width = 0;\r\n            }\r\n            result.push(token);\r\n            width += token.length;\r\n            result.push(' ');\r\n            width++;\r\n          }\r\n          if (strip()) {\r\n            width--;\r\n          }\r\n          return width;\r\n        };\r\n  \r\n        /* wrap the PGN output at max_width */\r\n        var current_width = 0\r\n        for (var i = 0; i < moves.length; i++) {\r\n          if (current_width + moves[i].length > max_width) {\r\n            if (moves[i].includes('{')) {\r\n              current_width = wrap_comment(current_width, moves[i]);\r\n              continue;\r\n            }\r\n          }\r\n          /* if the current move will push past max_width */\r\n          if (current_width + moves[i].length > max_width && i !== 0) {\r\n            /* don't end the line with whitespace */\r\n            if (result[result.length - 1] === ' ') {\r\n              result.pop()\r\n            }\r\n  \r\n            result.push(newline)\r\n            current_width = 0\r\n          } else if (i !== 0) {\r\n            result.push(' ')\r\n            current_width++\r\n          }\r\n          result.push(moves[i])\r\n          current_width += moves[i].length\r\n        }\r\n  \r\n        return result.join('')\r\n      },\r\n  \r\n      load_pgn: function(pgn, options) {\r\n        // allow the user to specify the sloppy move parser to work around over\r\n        // disambiguation bugs in Fritz and Chessbase\r\n        var sloppy =\r\n          typeof options !== 'undefined' && 'sloppy' in options\r\n            ? options.sloppy\r\n            : false\r\n  \r\n        function mask(str) {\r\n          return str.replace(/\\\\/g, '\\\\')\r\n        }\r\n  \r\n        function has_keys(object) {\r\n          for (var key in object) {\r\n            return true\r\n          }\r\n          return false\r\n        }\r\n  \r\n        function parse_pgn_header(header, options) {\r\n          var newline_char =\r\n            typeof options === 'object' &&\r\n            typeof options.newline_char === 'string'\r\n              ? options.newline_char\r\n              : '\\r?\\n'\r\n          var header_obj = {}\r\n          var headers = header.split(new RegExp(mask(newline_char)))\r\n          var key = ''\r\n          var value = ''\r\n  \r\n          for (var i = 0; i < headers.length; i++) {\r\n            key = headers[i].replace(/^\\[([A-Z][A-Za-z]*)\\s.*\\]$/, '$1')\r\n            value = headers[i].replace(/^\\[[A-Za-z]+\\s\"(.*)\"\\ *\\]$/, '$1')\r\n            if (trim(key).length > 0) {\r\n              header_obj[key] = value\r\n            }\r\n          }\r\n  \r\n          return header_obj\r\n        }\r\n  \r\n        var newline_char =\r\n          typeof options === 'object' && typeof options.newline_char === 'string'\r\n            ? options.newline_char\r\n            : '\\r?\\n'\r\n  \r\n        // RegExp to split header. Takes advantage of the fact that header and movetext\r\n        // will always have a blank line between them (ie, two newline_char's).\r\n        // With default newline_char, will equal: /^(\\[((?:\\r?\\n)|.)*\\])(?:\\r?\\n){2}/\r\n        var header_regex = new RegExp(\r\n          '^(\\\\[((?:' +\r\n            mask(newline_char) +\r\n            ')|.)*\\\\])' +\r\n            '(?:' +\r\n            mask(newline_char) +\r\n            '){2}'\r\n        )\r\n  \r\n        // If no header given, begin with moves.\r\n        var header_string = header_regex.test(pgn)\r\n          ? header_regex.exec(pgn)[1]\r\n          : ''\r\n  \r\n        // Put the board in the starting position\r\n        reset()\r\n  \r\n        /* parse PGN header */\r\n        var headers = parse_pgn_header(header_string, options)\r\n        for (var key in headers) {\r\n          set_header([key, headers[key]])\r\n        }\r\n  \r\n        /* load the starting position indicated by [Setup '1'] and\r\n         * [FEN position] */\r\n        if (headers['SetUp'] === '1') {\r\n          if (!('FEN' in headers && load(headers['FEN'], true))) {\r\n            // second argument to load: don't clear the headers\r\n            return false\r\n          }\r\n        }\r\n  \r\n        /* NB: the regexes below that delete move numbers, recursive\r\n         * annotations, and numeric annotation glyphs may also match\r\n         * text in comments. To prevent this, we transform comments\r\n         * by hex-encoding them in place and decoding them again after\r\n         * the other tokens have been deleted.\r\n         *\r\n         * While the spec states that PGN files should be ASCII encoded,\r\n         * we use {en,de}codeURIComponent here to support arbitrary UTF8\r\n         * as a convenience for modern users */\r\n  \r\n        var to_hex = function(string) {\r\n          return Array\r\n            .from(string)\r\n            .map(function(c) {\r\n              /* encodeURI doesn't transform most ASCII characters,\r\n               * so we handle these ourselves */\r\n              return c.charCodeAt(0) < 128\r\n                ? c.charCodeAt(0).toString(16)\r\n                : encodeURIComponent(c).replace(/\\%/g, '').toLowerCase()\r\n            })\r\n            .join('')\r\n        }\r\n  \r\n        var from_hex = function(string) {\r\n          return string.length == 0\r\n            ? ''\r\n            : decodeURIComponent('%' + string.match(/.{1,2}/g).join('%'))\r\n        }\r\n  \r\n        var encode_comment = function(string) {\r\n          string = string.replace(new RegExp(mask(newline_char), 'g'), ' ')\r\n          return `{${to_hex(string.slice(1, string.length - 1))}}`\r\n        }\r\n  \r\n        var decode_comment = function(string) {\r\n          if (string.startsWith('{') && string.endsWith('}')) {\r\n            return from_hex(string.slice(1, string.length - 1))\r\n          }\r\n        }\r\n  \r\n        /* delete header to get the moves */\r\n        var ms = pgn\r\n          .replace(header_string, '')\r\n          .replace(\r\n            /* encode comments so they don't get deleted below */\r\n            new RegExp(`(\\{[^}]*\\})+?|;([^${mask(newline_char)}]*)`, 'g'),\r\n            function(match, bracket, semicolon) {\r\n              return bracket !== undefined\r\n                ? encode_comment(bracket)\r\n                : ' ' + encode_comment(`{${semicolon.slice(1)}}`)\r\n            }\r\n          )\r\n          .replace(new RegExp(mask(newline_char), 'g'), ' ')\r\n  \r\n        /* delete recursive annotation variations */\r\n        var rav_regex = /(\\([^\\(\\)]+\\))+?/g\r\n        while (rav_regex.test(ms)) {\r\n          ms = ms.replace(rav_regex, '')\r\n        }\r\n  \r\n        /* delete move numbers */\r\n        ms = ms.replace(/\\d+\\.(\\.\\.)?/g, '')\r\n  \r\n        /* delete ... indicating black to move */\r\n        ms = ms.replace(/\\.\\.\\./g, '')\r\n  \r\n        /* delete numeric annotation glyphs */\r\n        ms = ms.replace(/\\$\\d+/g, '')\r\n  \r\n        /* trim and get array of moves */\r\n        var moves = trim(ms).split(new RegExp(/\\s+/))\r\n  \r\n        /* delete empty entries */\r\n        moves = moves\r\n          .join(',')\r\n          .replace(/,,+/g, ',')\r\n          .split(',')\r\n        var move = ''\r\n  \r\n        for (var half_move = 0; half_move < moves.length - 1; half_move++) {\r\n          var comment = decode_comment(moves[half_move])\r\n          if (comment !== undefined) {\r\n            comments[generate_fen()] = comment\r\n            continue\r\n          }\r\n          move = move_from_san(moves[half_move], sloppy)\r\n  \r\n          /* move not possible! (don't clear the board to examine to show the\r\n           * latest valid position)\r\n           */\r\n          if (move == null) {\r\n            return false\r\n          } else {\r\n            make_move(move)\r\n          }\r\n        }\r\n  \r\n        comment = decode_comment(moves[moves.length - 1])\r\n        if (comment !== undefined) {\r\n          comments[generate_fen()] = comment\r\n          moves.pop()\r\n        }\r\n  \r\n        /* examine last move */\r\n        move = moves[moves.length - 1]\r\n        if (POSSIBLE_RESULTS.indexOf(move) > -1) {\r\n          if (has_keys(header) && typeof header.Result === 'undefined') {\r\n            set_header(['Result', move])\r\n          }\r\n        } else {\r\n          move = move_from_san(move, sloppy)\r\n          if (move == null) {\r\n            return false\r\n          } else {\r\n            make_move(move)\r\n          }\r\n        }\r\n        return true\r\n      },\r\n  \r\n      header: function() {\r\n        return set_header(arguments)\r\n      },\r\n  \r\n      ascii: function() {\r\n        return ascii()\r\n      },\r\n  \r\n      turn: function() {\r\n        return turn\r\n      },\r\n  \r\n      move: function(move, options) {\r\n        /* The move function can be called with in the following parameters:\r\n         *\r\n         * .move('Nxb7')      <- where 'move' is a case-sensitive SAN string\r\n         *\r\n         * .move({ from: 'h7', <- where the 'move' is a move object (additional\r\n         *         to :'h8',      fields are ignored)\r\n         *         promotion: 'q',\r\n         *      })\r\n         */\r\n  \r\n        // allow the user to specify the sloppy move parser to work around over\r\n        // disambiguation bugs in Fritz and Chessbase\r\n        var sloppy =\r\n          typeof options !== 'undefined' && 'sloppy' in options\r\n            ? options.sloppy\r\n            : false\r\n  \r\n        var move_obj = null\r\n  \r\n        if (typeof move === 'string') {\r\n          move_obj = move_from_san(move, sloppy)\r\n        } else if (typeof move === 'object') {\r\n          var moves = generate_moves()\r\n  \r\n          /* convert the pretty move object to an ugly move object */\r\n          for (var i = 0, len = moves.length; i < len; i++) {\r\n            if (\r\n              move.from === algebraic(moves[i].from) &&\r\n              move.to === algebraic(moves[i].to) &&\r\n              (!('promotion' in moves[i]) ||\r\n                move.promotion === moves[i].promotion)\r\n            ) {\r\n              move_obj = moves[i]\r\n              break\r\n            }\r\n          }\r\n        }\r\n  \r\n        /* failed to find move */\r\n        if (!move_obj) {\r\n          return null\r\n        }\r\n  \r\n        /* need to make a copy of move because we can't generate SAN after the\r\n         * move is made\r\n         */\r\n        var pretty_move = make_pretty(move_obj)\r\n  \r\n        make_move(move_obj)\r\n  \r\n        return pretty_move\r\n      },\r\n\r\n      ugly_move: function(move_obj, options) {\r\n        var pretty_move = make_pretty(move_obj);\r\n        make_move(move_obj);\r\n\r\n        return pretty_move;\r\n      },\r\n  \r\n      undo: function() {\r\n        var move = undo_move()\r\n        return move ? make_pretty(move) : null\r\n      },\r\n  \r\n      clear: function() {\r\n        return clear()\r\n      },\r\n  \r\n      put: function(piece, square) {\r\n        return put(piece, square)\r\n      },\r\n  \r\n      get: function(square) {\r\n        return get(square)\r\n      },\r\n  \r\n      remove: function(square) {\r\n        return remove(square)\r\n      },\r\n  \r\n      perft: function(depth) {\r\n        return perft(depth)\r\n      },\r\n  \r\n      square_color: function(square) {\r\n        if (square in SQUARES) {\r\n          var sq_0x88 = SQUARES[square]\r\n          return (rank(sq_0x88) + file(sq_0x88)) % 2 === 0 ? 'light' : 'dark'\r\n        }\r\n  \r\n        return null\r\n      },\r\n  \r\n      history: function(options) {\r\n        var reversed_history = []\r\n        var move_history = []\r\n        var verbose =\r\n          typeof options !== 'undefined' &&\r\n          'verbose' in options &&\r\n          options.verbose\r\n  \r\n        while (history.length > 0) {\r\n          reversed_history.push(undo_move())\r\n        }\r\n  \r\n        while (reversed_history.length > 0) {\r\n          var move = reversed_history.pop()\r\n          if (verbose) {\r\n            move_history.push(make_pretty(move))\r\n          } else {\r\n            move_history.push(move_to_san(move))\r\n          }\r\n          make_move(move)\r\n        }\r\n  \r\n        return move_history\r\n      },\r\n  \r\n      get_comment: function() {\r\n        return comments[generate_fen()];\r\n      },\r\n  \r\n      set_comment: function(comment) {\r\n        comments[generate_fen()] = comment.replace('{', '[').replace('}', ']');\r\n      },\r\n  \r\n      delete_comment: function() {\r\n        var comment = comments[generate_fen()];\r\n        delete comments[generate_fen()];\r\n        return comment;\r\n      },\r\n  \r\n      get_comments: function() {\r\n        prune_comments();\r\n        return Object.keys(comments).map(function(fen) {\r\n          return {fen: fen, comment: comments[fen]};\r\n        });\r\n      },\r\n  \r\n      delete_comments: function() {\r\n        prune_comments();\r\n        return Object.keys(comments)\r\n          .map(function(fen) {\r\n            var comment = comments[fen];\r\n            delete comments[fen];\r\n            return {fen: fen, comment: comment};\r\n          });\r\n      }\r\n    }\r\n  }\r\n  \r\n  /* export Chess object if using node or any other CommonJS compatible\r\n   * environment */\r\n  if (typeof exports !== 'undefined') exports.Chess = Chess\r\n  /* export Chess object for any RequireJS compatible environment */\r\n  if (typeof define !== 'undefined')\r\n    define(function() {\r\n      return Chess\r\n    })"],"names":[],"version":3,"file":"chess.b577f610.js.map","sourceRoot":"/__parcel_source_root/"}